<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Documentation</title>
    <link>https://calypsonet.github.io/keyple-doc-yy/docs/</link>
    <description>Recent content in Documentation on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://calypsonet.github.io/keyple-doc-yy/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Keyple ‘Core’ – User guide (high level API)</title>
      <link>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/core/keyplecore_userguide/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/core/keyplecore_userguide/</guid>
      <description>
        
        
        &lt;p&gt;This high-level API is convenient for developers implementing smart card processing application for terminal interfaced with smart card readers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#packages--features&#34;&gt;1	Packages &amp;amp; features&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#secure-element-transaction-sequence--setting--selection&#34;&gt;2	Secure Element transaction sequence – setting &amp;amp; selection&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#secure-element-proxy-service-api--readers-management&#34;&gt;3	Secure Element Proxy Service API – readers management&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#plugin-setting&#34;&gt;3.1	Plugin setting&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#se-readers-access&#34;&gt;3.2	SE readers’ access&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#support-of-reader-farm-or-HSM&#34;&gt;3.2.1	Support of reader farm or HSM&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#se-presence-check--explicit-selection-transaction&#34;&gt;3.2.2	SE presence check &amp;amp; “explicit selection transaction”&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#plugin--reader-events&#34;&gt;3.3	Plugin &amp;amp; Reader events&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#plugin-observability-activation&#34;&gt;3.3.1	Plugin observability activation&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#automatic-selection--default-selection-transaction&#34;&gt;3.3.2	Automatic selection &amp;amp; “default selection transaction”&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#reader-notification-modes&#34;&gt;3.3.3	Reader notification modes&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#reader-observability-activation-polling-mode--se-removal-procedure&#34;&gt;3.3.4	Reader observability activation, “polling mode” &amp;amp; “SE removal procedure”&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#secure-element-selection-api&#34;&gt;4	Secure Element Selection API&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#selection-parameters-communication-protocol-atr-aid&#34;&gt;4.1	Selection parameters (Communication protocol, ATR, AID)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#selection-transaction&#34;&gt;4.2	Selection transaction&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;packages--features&#34;&gt;Packages &amp;amp; features&lt;/h2&gt;
&lt;p&gt;The Keyple Core User API is a tool to manage readers, and to select “generic” Secure Elements.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;2&#34;&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;3&#34;&gt;SE reader management&lt;/td&gt;
    &lt;td&gt;Secure Element reader access&lt;/td&gt;
    &lt;td&gt;org.eclipse.keyple.core.&lt;b&gt;seproxy&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Notifications of:
           &lt;li&gt;reader plug/unplug,&lt;/li&gt;
           &lt;li&gt;SE insertion/remove&lt;/li&gt;
           Definition of automatic selection request in case of SE insertion on an Observable Reader.&lt;/td&gt;
    &lt;td&gt;org.eclipse.keyple.core.seproxy.&lt;b&gt;event&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Communication protocols filters (setting for contactless/contacts SE Reader)&lt;/td&gt;
    &lt;td&gt;org.eclipse.keyple.core.seproxy.&lt;b&gt;protocol&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;SE selection&lt;/td&gt;
    &lt;td&gt;Generic selection of a Secure Element&lt;/td&gt;
    &lt;td&gt;org.eclipse.keyple.core.&lt;b&gt;selection&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h2 id=&#34;secure-element-transaction-sequence--setting--selection&#34;&gt;Secure Element transaction sequence – setting &amp;amp; selection&lt;/h2&gt;
&lt;p&gt;A Secure Element transaction starts with the setting of plugins in order to choose the reader to communicate with SE.&lt;/p&gt;
&lt;p&gt;Using a SE reader, depending on its capabilities, there can be two ways to select a SE through it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either the processing of an “explicit selection”: if a SE is present in the reader, then the terminal directly operates a SE selection request through the reader.&lt;/li&gt;
&lt;li&gt;Otherwise if the reader is “observable”, the operating of a “default selection”: in this case a default selection request is defined on the reader, the terminal observes the reader, and wait to be notified by the reader about a SE insertion and selection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end the terminal gets a selected SE, it can follow by operating APDU commands with the selected SE until the communication channel is kept open.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-0-SE_SelectionScenarii.png&#34; alt=&#34;SE Selection Scenarii scheme&#34; title=&#34;SE Selection Scenarii&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then a Keyple Core extension could be used to operates APDU commands with the selected SE solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Keyple Calypso extension provides a high-level API to defined ticketing processing involving Calypso cards, cf.: &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/master/docs/KeypleCalypso_UserGuide.adoc&#34;&gt;“Keyple Calypso User Guide”&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;secure-element-proxy-service-api--readers-management&#34;&gt;Secure Element Proxy Service API – readers management&lt;/h2&gt;
&lt;p&gt;Using the Keyple Core, Secure Element Readers (SeReader) are managed through plugins (ReaderPlugin).&lt;/p&gt;
&lt;p&gt;The active plugins are registered to the SE Proxy Service (the singleton SeProxyService).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each plugin is registered through a unique name to the SE Proxy Service.&lt;/li&gt;
&lt;li&gt;Each reader of a plugin is also defined with a unique name inside the plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;plugin-setting&#34;&gt;Plugin setting&lt;/h3&gt;
&lt;p&gt;To secure the usage of the SE Proxy API for the development of terminal applications, the internal implementation of plugins (classes SpecificPluginImpl &amp;amp; SpecificReaderImpl) is hidden.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For a specific plugin, only the plugin &amp;amp; reader interfaces (SpecificPlugin &amp;amp; SpecificReader) and the factory (class SpecificPluginFactory) are public.&lt;/li&gt;
&lt;li&gt;The factory of a plugin is set to register a specific plugin to the SE Proxy Service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-1-SE_Proxy-PluginSetting.png&#34; alt=&#34;SE Proxy - Plugin Setting scheme&#34; title=&#34;SE Proxy - Plugin Setting&#34;&gt;&lt;/p&gt;
&lt;p&gt;Most of plugins of local readers of Keyple are defined as singleton with a unique instance (e.g.: PC/SC, Android NFC, Android OMAPI, most of embedded readers).&lt;/p&gt;
&lt;p&gt;For the Remote SE plugin defined to manage remote readers, specific plugin instances are created for each communication interfaces.&lt;/p&gt;
&lt;h3 id=&#34;se-readers-access&#34;&gt;SE readers’ access&lt;/h3&gt;
&lt;p&gt;The SE Proxy Service allows to get all the list of the active plugins. A specific plugin could also be directly recovered through its name.&lt;/p&gt;
&lt;p&gt;In the same way, a plugin can provide the list of all the plugged readers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-2-SE_Proxy-ReaderAccess.png&#34; alt=&#34;SE Proxy - Reader Access scheme&#34; title=&#34;SE Proxy - Reader Access&#34;&gt;&lt;/p&gt;
&lt;p&gt;Depending on the native reader technology, some specific parameters could be defined at the plugin or reader level.&lt;/p&gt;
&lt;p&gt;For a classic plugin, the number of readers is determinate, all the plugged readers of the plugin are directly available for the SE Proxy Service.&lt;/p&gt;
&lt;h4 id=&#34;support-of-reader-farm-or-hsm&#34;&gt;Support of reader farm or HSM&lt;/h4&gt;
&lt;p&gt;For systems based on a centralized security, in order to manage multiple remote terminal in parallel, central servers could requires to interface a huge number (several hundreds or thousands) of SE through a farm of readers or HSM (Hardware Security Module: an electronic board able to emulate multiple SE).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The multitude of embedded SE could be divided in different groups of profiles.&lt;/li&gt;
&lt;li&gt;An HSM is often shared between several services, so the full set of readers isn&amp;rsquo;t directly available for a service, a service has to request the allocation of a reader from a specific group.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The SE Proxy Service could support reader farm or HSM though plugins managing &amp;ldquo;pool&amp;rdquo; of readers (ReaderPoolPlugin).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the initialization, the list of reader is empty. The list is be filled depending on the reader allocations requested.&lt;/li&gt;
&lt;li&gt;When not more required, a reader could be released from the pool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All plugins have to implement the interface ReaderPlugin and SeReader. A plugin managing a pool of reader should implement in addition the interface ReaderPoolPlugin.&lt;/p&gt;
&lt;h4 id=&#34;se-presence-check--explicit-selection-transaction&#34;&gt;SE presence check &amp;amp; “explicit selection transaction”&lt;/h4&gt;
&lt;p&gt;A SE reader has the capability to check is a SE is present or not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For SE terminal processing for which the presence of a SE in a reader is &amp;ldquo;static&amp;rsquo; during a transaction, the transaction starts in general with the verification of the SE presence. If the SE is present, the transaction can continue with the selection of the SE. We call this kind of transaction: an &amp;ldquo;explicit selection transaction&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;plugin--reader-events&#34;&gt;Plugin &amp;amp; Reader events&lt;/h3&gt;
&lt;p&gt;For some SE terminal, the processing is dynamically driven by the insertion/remove of a SE in a reader, or by the plug/unplug of a reader.&lt;/p&gt;
&lt;p&gt;E.g., in transportation, the ticketing transaction of access control gates is often started when a contactless card is detected in the field of the reader. For that, in Keyple, a SE reader or a plugin has to be observable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-3-SE_Proxy-ObserverPattern.png&#34; alt=&#34;SE Proxy - Observer Pattern scheme&#34; title=&#34;SE Proxy - Observer Pattern&#34;&gt;&lt;/p&gt;
&lt;p&gt;A plugin could be optionally observable (by implementing ObservablePlugin).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this case a terminal application could observe the plugin (by implementing PluginObserver) in order to be notified (PluginEvent) when a new reader is plugged to the plugin, or when a referenced reader is unplugged.&lt;/li&gt;
&lt;li&gt;To receive the notification of a specific plugin, the plugin observer should first be added to the observer list of the observable plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on the capability of the plugin, a reader could be optionally observable (by implementing ObservableReader).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A terminal application could observe the plugin (by implementing ReaderObserver) in order to be notified (ReaderEvent) when a SE is inserted or removed from a specific.&lt;/li&gt;
&lt;li&gt;The reader observer should be added to the observer list to receive the notifications the observable reader.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, an observable reader notifies only the insertion or the remove of a SE.&lt;/p&gt;
&lt;h4 id=&#34;plugin-observability-activation&#34;&gt;Plugin observability activation&lt;/h4&gt;
&lt;p&gt;An observable plugin automatically starts to observe plugin events when at least one plugin observer is registered and stops the listening when the last plugin observer is removed.&lt;/p&gt;
&lt;h4 id=&#34;automatic-selection--default-selection-transaction&#34;&gt;Automatic selection &amp;amp; “default selection transaction”&lt;/h4&gt;
&lt;p&gt;On an observable reader, there is in addition the possibility to define a &amp;ldquo;default selection operation&amp;rdquo;: in this case, when a SE is inserted, the observable reader tries automatically to select the inserted SE using the defined default setting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the inserted SE is successfully selected, then the observable reader notifies that &amp;ldquo;an inserted SE has matched the default selection&amp;rdquo; and provides the corresponding response.&lt;/li&gt;
&lt;li&gt;Otherwise if the observable reader failed to select the inserted SE, it could just notify that a SE has been inserted.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;For SE terminal for which the processing is &amp;ldquo;dynamically&amp;rdquo; driven by the presence of a SE in a reader, the transaction starts in general with the detection of the insertion of a SE and its automatic selection. The reader observer is then notified to analyze the response of the selected SE, and to continue the transaction with the SE. We call this kind of transaction: a &amp;ldquo;default selection transaction&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-4-SE_Proxy-SE_Listening.png&#34; alt=&#34;SE Proxy - SE Listening scheme&#34; title=&#34;SE Proxy - SE Listening&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;reader-notification-modes&#34;&gt;Reader notification modes&lt;/h4&gt;
&lt;p&gt;If no default selection is defined, an observable reader notifies its observers for “SE insertion” (whatever the SE detected) or “SE removed” events.
A default selection could be defined for the “always” or the &amp;ldquo;matched only” notification mode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the always mode, if the inserted matches the default selection, the observers are notified about a “SE matched” event, otherwise an “SE insertion” event is notified.&lt;/li&gt;
&lt;li&gt;In case of &amp;ldquo;matched only” mode, the observable reader doesn’t notify SE insertion event. The reader observer will be notified only if a default selection succeed on the observable reader; this configuration allows the reader observer to skip the processing of wrong SE insertions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reader-observability-activation-polling-mode--se-removal-procedure&#34;&gt;Reader observability activation, “polling mode” &amp;amp; “SE removal procedure”&lt;/h4&gt;
&lt;p&gt;For an observable reader, the listening of reader event requires also the registration of at least one reader observer.&lt;/p&gt;
&lt;p&gt;An observable reader could switch between four internal states: “Wait for start detection”, “Wait for SE insertion”, “Wait for SE processing”, “Wait for SE removal”.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the wait for start detection, the observable reader doesn’t notify any event.&lt;/li&gt;
&lt;li&gt;The start of the SE detection by an observable reader need to be  explicitly requested by an observer by setting a “polling mode” either through a ‘startSeDetection’ or a ‘setDefaultSelectionRequest’ commands. The SE detection could be started for polling mode defined either in “single shot” or “repeating” mode.
&lt;ul&gt;
&lt;li&gt;In single shot mode, the observable reader stops the detection after the SE removal (back to the wait for start detection).&lt;/li&gt;
&lt;li&gt;In repeating mode, after the SE removal, the observable reader restart to detect another SE (back to the wait for SE insertion).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wait for SE insertion, if a SE is inserted or selected, the registered reader observers are notified by the observable reader according to the defined notification mode. The observable reader switches to the wait for SE processing.&lt;/li&gt;
&lt;li&gt;During the SE processing by the observers, the observable reader waits that an observer acknowledges the end of the SE processing.&lt;/li&gt;
&lt;li&gt;There are two waits to ends the processing of an observed SE:
&lt;ul&gt;
&lt;li&gt;Either an observer directly could stop the listening of the observable reader (‘stopSeDetection’ command). The observable reader switches to the wait for start detection, and the observers are immediately notified about the SE remove.&lt;/li&gt;
&lt;li&gt;Otherwise, the observers could wait for a clean remove of the SE from the observable reader; it’s the SE removal sequence:
&lt;ul&gt;
&lt;li&gt;When the main reader observer has finished the processing of the SE, it could request the observable reader to wait for the remove of the SE (‘notifySeProcessed’ command).&lt;/li&gt;
&lt;li&gt;Finally, the reader observers could be notified when the SE is effectively removed.&lt;/li&gt;
&lt;li&gt;If the SE insertion listening started in the &amp;ldquo;repeating polling mode&amp;rdquo;, then when the SE is removed, the observable reader automatically starts again the listening of a new SE insertion; otherwise a new explicit request to start the SE listening is required to restart the listening.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;secure-element-selection-api&#34;&gt;Secure Element Selection API&lt;/h2&gt;
&lt;h3 id=&#34;selection-parameters-communication-protocol-atr-aid&#34;&gt;Selection parameters (Communication protocol, ATR, AID)&lt;/h3&gt;
&lt;p&gt;To select a Secure Element, a SE Selector has to be defined, based on one to three parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A SE selection could be defined for a specific communication protocol.&lt;/li&gt;
&lt;li&gt;A SE could be filtered for an ATR (Answer To Reset) matching a specific regular expression.&lt;/li&gt;
&lt;li&gt;A specific application of a SE could be selected by setting its AID (Application IDentifier).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-5-SE_Proxy-SE_Selector.png&#34; alt=&#34;SE Proxy - SE Selector scheme&#34; title=&#34;SE Proxy - SE Selector&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;selection-transaction&#34;&gt;Selection transaction&lt;/h3&gt;
&lt;p&gt;To operate a transaction with a SE, it should be firstly selected. The aim of the SE selection API is to get a SE resource: a set of a reader with a selected SE.&lt;/p&gt;
&lt;p&gt;A SE Selection is managed in two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first the “preparations” of selection request based on SE selector,&lt;/li&gt;
&lt;li&gt;next the “processing” of the selection requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to manage multiple kinds of SE, several selection requests could be prepared with different selectors.&lt;/p&gt;
&lt;p&gt;Depending on the setting of the reader, the processing of the selection could be operated in two different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;either in a “explicit” way after the checking of the SE presence,&lt;/li&gt;
&lt;li&gt;or in a ”default” way for an observable reader detecting the insertion of a SE.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase1_ExplicitSelectionAid/src/main/java/org/eclipse/keyple/example/generic/pc/usecase1/ExplicitSelectionAid_Pcsc.java&#34;&gt;“Generic Use Case 1 / Explicit AID Selection”&lt;/a&gt; example&lt;br&gt;
cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase2_DefaultSelectionNotification/src/main/java/org/eclipse/keyple/example/generic/pc/usecase2/DefaultSelectionNotification_Pcsc.java&#34;&gt;“Generic Use Case 2 / Default Selection Notification”&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCore-6-SE_Proxy-SE_Selection.png&#34; alt=&#34;SE Proxy - SE Selection scheme&#34; title=&#34;SE Proxy - SE Selection&#34;&gt;&lt;/p&gt;
&lt;p&gt;In case a SE Selection is prepared with a channel control mode defined as “keep open”, then the different prepared selectors are operated with the presented SE, but the processing of the selection stops when a selector matches the SE.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The result of the SE selection could be a single ‘matching SE’: this SE is kept as selected in the reader. It’s possible to directly operate command with the SE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But if a SE selection has been defined with a channel control mode at “close after”, in this case all the prepared SE selectors are operated whatever the matching result.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After each selector processing, if a selector has matched, the logical channel with the SE is closed (the SE is no more selected).&lt;/li&gt;
&lt;li&gt;If several applications of the presented SE have matched the selectors: the result of the processing of SE selections is a list matching SE, but all of them are deselected. To continue the SE processing, the terminal application has to choose one matching SE, and to select it again but in “keep open” channel control mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase3_GroupedMultiSelection/src/main/java/org/eclipse/keyple/example/generic/pc/usecase3/GroupedMultiSelection_Pcsc.java&#34;&gt;“Generic Use Case 3 / Grouped Multi-Selection”&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the selection of a SE, using a SE resource, the terminal can continue by operating a specific transaction with the corresponding SE.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase4_SequentialMultiSelection/src/main/java/org/eclipse/keyple/example/generic/pc/usecase4/SequentialMultiSelection_Pcsc.java&#34;&gt;“Generic Use Case 4 / Sequential Multi-Selection”&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Keyple ‘Calypso’ – User guide (high level API)</title>
      <link>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/calypso/keyplecalypso_userguide/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/calypso/keyplecalypso_userguide/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;#packages--features&#34;&gt;1  Packages &amp;amp; features&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#calypso-selection&#34;&gt;2  Calypso Selection&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;#calypso-secure-transaction&#34;&gt;3  Calypso secure transaction&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;packages--features&#34;&gt;Packages &amp;amp; features&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Keyple Calypso User API is an extension of the Keyple Core User API&lt;/strong&gt; to manage Calypso Portable Object securely using Calypso SAM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The generic Secure Element selection is enhanced for the &lt;strong&gt;selection of a Calypso PO&lt;/strong&gt;. The FCI response is automatically analyzed in order to identify the revision and the features supported by the Calypso PO. The invalidation status is also checked.&lt;/li&gt;
&lt;li&gt;The selected Calypso PO object allows to automatically initialize a &lt;strong&gt;Calypso PO transaction&lt;/strong&gt;: high level functional commands could be prepared and processed in order to &lt;strong&gt;read or write data in the PO file structure&lt;/strong&gt;, outside or securely inside a &lt;strong&gt;Calypso secure session&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;2&#34;&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;2&#34; width=&#34;15%&#34;&gt;Calypso PO operations&lt;/td&gt;
    &lt;td width=&#34;50%&#34;&gt;Selection of Calypso SE: PO or SAM
PO transaction:
 &lt;li&gt;Read / update of data&lt;/li&gt;
 &lt;li&gt;PO authentication&lt;/li&gt;&lt;/td&gt;
    &lt;td width=&#34;35%&#34;&gt;org.eclipse.keyple.calypso.&lt;b&gt;transaction&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Calypso PO responses data parsing&lt;/td&gt;
    &lt;td&gt;org.eclipse.keyple.calypso.&lt;b&gt;command.po.parser&lt;b&gt;&lt;/td&gt;
  &lt;/tr&gt;  
&lt;/table&gt;
&lt;h2 id=&#34;calypso-selection&#34;&gt;Calypso Selection&lt;/h2&gt;
&lt;p&gt;The Calypso API to select a Portable object is an extension of the generic Secure Element selection Core API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A PO AID selection could be defined to &lt;strong&gt;accept or reject invalidated PO&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A request for a SE selection is defined with SE selector containing at least an AID (to operate through a Select Application APDU command) or an ATR filter. A request for a PO selection could be enhanced to operate after the PO selector processing some APDU commands with the PO : &lt;strong&gt;Select File or Read Records commands&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In case of successful Calypso PO, the matching SE is retuned as a Calypso PO. The Calypso API analyzes the startup information of a Calypso PO in order to identify the kind of product, its revision, the optional features supported, the file structure used. Then for coming PO commands, the setting of the technical parameters automatically managed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PO command grouped with the PO selection have to be “prepared” before the processing of a default or explicit SE selection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase1_ExplicitSelectionAid/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase1/ExplicitSelectionAid_Pcsc.java&#34;&gt;“Calypso Use Case 1 / Explicit AID Selection”&lt;/a&gt; example&lt;br&gt;
cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase2_DefaultSelectionNotification/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase2/DefaultSelectionNotification_Pcsc.java&#34;&gt;“Calypso Use Case 2 / Default Selection Notification”&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCalypso-1-Transaction-PO_Selection.png&#34; alt=&#34;Calypso - PO Selection scheme&#34; title=&#34;Calypso - PO Selection&#34;&gt;
A ‘PO resource’ is the set of a Calypso PO and the reader on which it is selected.&lt;/p&gt;
&lt;p&gt;In a same way the Calypso APO provides the tool to select a Calypso security module (a SAM). A SAM selector doesn’t support AID. The corresponding matching SE is a Calypso SAM. A Calypso SAM and the reader used for its selection defines a ‘SAM resource’.&lt;/p&gt;
&lt;h2 id=&#34;calypso-secure-transaction&#34;&gt;Calypso secure transaction&lt;/h2&gt;
&lt;p&gt;A PO transaction could be operated on a Calypso resource. In case a SAM resource is set, a PO transaction could support the Calypso secure session in order to manage a mutual authentication between the terminal and the Calypso PO.&lt;/p&gt;
&lt;p&gt;Through the PO transaction API, only the APDU commands for the PO are explicitly defined; the APDU commands for the SAM are automatically built by the library. Two kinds of methods are provided by the API: ‘&lt;strong&gt;prepare&lt;/strong&gt;’ methods, and ‘&lt;strong&gt;process&lt;/strong&gt;’ methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ‘prepare’ methods allows to define PO file selection and PO data access operations (read or update of records for a specific file, append of record for a cyclic file, increase or decrease of the value of a counter).&lt;/li&gt;
&lt;li&gt;A ‘process” method sends to the PO at least the previously prepared command.
&lt;ul&gt;
&lt;li&gt;The process PO commands method could operated only if no secure session is currently open with the PO. If one or several PO commands have been prepared, a single request is done to the PO reader.&lt;/li&gt;
&lt;li&gt;The process opening method allows to manage the opening of a secure session.
&lt;ul&gt;
&lt;li&gt;First a single request is operated to the SAM reader in order to set the PO serial as the cryptographic diversifier, and to get the terminal challenge for the session.&lt;/li&gt;
&lt;li&gt;Then another single request is done to the PO reader to play the prepared PO command, and to manage the opening of the PO session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A process PO command in session method could be processed only if a secure session is already open with PO.
&lt;ul&gt;
&lt;li&gt;A single request Is operated with the PO reader to operate the prepared PO commands.&lt;/li&gt;
&lt;li&gt;Another single request is sent to the SAM reader to update the update the digest of the MAC session.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The process closing method is used to manage the closing of the secure session with the PO.
&lt;ul&gt;
&lt;li&gt;A first SAM request is operated to update the digest of the last prepared PO commands and to get the terminal session certificate (to save a PO request, the API anticipates the responses of the prepared PO commands).&lt;/li&gt;
&lt;li&gt;A single PO request is transmitted to run the last prepared PO command, to recover the PO session certificate, and to send the ratification signal if necessary.&lt;/li&gt;
&lt;li&gt;Finally, a second SAM request allows to authenticate the PO. If the transaction is successful the mutual authentication is valid, and the PO has atomically committed the requested data updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The minimal costs of a Calypso secure session are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 PO requests (1 for the PO selection + 1 for the PO session opening + 1 for the PO session closing).&lt;/li&gt;
&lt;li&gt;And 3 SAM requests if the SAM is already selected (1 for the PO session opening + 2 for the PO session closing); otherwise 4 SAM requests if the SAM isn’t already selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleCalypso-2-Transaction-PO_Session.png&#34; alt=&#34;Calypso - PO Transaction scheme&#34; title=&#34;Calypso - PO Transaction&#34;&gt;&lt;/p&gt;
&lt;p&gt;By default, the PO transaction manages the Calypso secure session as ‘atomic’: the cumulative amount of PO updates command can’t exceed the size of the PO session buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase4_PoAuthentication/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase4/PoAuthentication_Pcsc.java&#34;&gt;“Calypso Use Case 4 / PO Authentication”&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The PO transaction could also be defined to allow multiple sessions: in this case the transaction is automatically split in several session as necessary.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cf. &lt;a href=&#34;https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase5_MultipleSession/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase5/MultipleSession_Pcsc.java&#34;&gt;“Calypso Use Case 5 / PO Multiple Session&amp;rdquo;&lt;/a&gt; example&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Keyple Calypso – Evolution 0.9</title>
      <link>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/calypso/calypso-evo-0.9/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/calypso/calypso-evo-0.9/</guid>
      <description>
        
        
        &lt;h1 id=&#34;the-po-selection-api&#34;&gt;The PO selection API&lt;/h1&gt;
&lt;p&gt;The role of this API is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to detect the presentation of a particular Calypso PO,&lt;/li&gt;
&lt;li&gt;to select the target application (in the ISO7816-4 sense),&lt;/li&gt;
&lt;li&gt;to execute additional commands (among a reduced set) following the selection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data produced by this mechanism is a CalypsoPo object (instance of the generic keyple-core object AbstractMatchingSe).&lt;/p&gt;
&lt;p&gt;The CalypsoPo object contains the information derived from the FCI analysis received in response to the selection command as well as the data received in response to any additional commands that may have been executed.&lt;/p&gt;
&lt;p&gt;The Keyple Calypso selection API is an extension of the Keyple Core selection API and consists in the following classes:&lt;/p&gt;
&lt;h2 id=&#34;poselector&#34;&gt;PoSelector&lt;/h2&gt;
&lt;p&gt;Defines the elements for selecting a Calypso PO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extends SeSelector&lt;/li&gt;
&lt;li&gt;Provides the PoAidSelector inner class which extends AidSelector with the information needed to process invalidated POs. The AID value is used to select the PO application as defined by ISO7816-4 (at least 5 and up to 16 bytes).&lt;/li&gt;
&lt;li&gt;Provides the PoAtrFilter inner class which extends AtrFilter without addition.
The filtering mechanism consists of a regular expression targeting the ATR of the PO. In the contactless mode the notion of ATR does not exist, it is emulated a posteriori by the reader (cf. PC/SC). The actual value of the ATR returned by the reader can thus vary from one reader to another according to the interpretation made by the manufacturer. This makes this value something that will have to be adjusted according to the hardware configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PoSelector acts as a filter to designate the Calypso PO you are targeting. Based on the generic keyple-core selection mechanism it implements filtering by communication protocol (ISO, B Prime) and by AID or ATR.
Thus, any SE that does not meet the criteria defined by the PoSelector will not be reported to the application.
The selection modes by AID or ATR are exclusive. The ATR mode targets POs that do not have AID selection capability such as very old PO revision 1.0.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InvalidatedPo&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;REJECT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ACCEPT&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* Constructor */&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SeProtocol&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;seProtocol&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; 
                    &lt;span style=&#34;color:#000&#34;&gt;PoAtrFilter&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;poAtrFilter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; 
                    &lt;span style=&#34;color:#000&#34;&gt;PoAidSelector&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;poAidSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; 
                    &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoAidSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IsoAid&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aidToSelect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; 
                        &lt;span style=&#34;color:#000&#34;&gt;InvalidatedPo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;invalidatedPo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;
                        &lt;span style=&#34;color:#000&#34;&gt;FileOccurrence&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileOccurrence&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; 
                        &lt;span style=&#34;color:#000&#34;&gt;FileControlInformation&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fileControlInformation&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoAidSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IsoAid&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aidToSelect&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;InvalidatedPo&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;invalidatedPo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoAtrFilter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;atrRegex&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;poselectionrequest&#34;&gt;PoSelectionRequest&lt;/h2&gt;
&lt;p&gt;This class is used to build the SeRequest that is executed when detecting an SE identified as a Calypso PO using the PoSelector described above.&lt;/p&gt;
&lt;p&gt;The PoSelectionRequest is provided as a preparation case for the generic SeSelection; several PoSelectionRequests can be prepared to target different POs. Here, attention should be paid to the order in which the selection cases are placed in the generic SeSelection (see the generic selection API).&lt;/p&gt;
&lt;p&gt;The result of the selection is returned by the means of the generic keyple-core selection (explicit or default modes, ReaderEvent notification).&lt;/p&gt;
&lt;h3 id=&#34;addtional-commands&#34;&gt;Addtional commands&lt;/h3&gt;
&lt;p&gt;In addition to the &amp;ldquo;Select Application&amp;rdquo; command, the SeRequest produced by PoSelectionRequest can embed additional commands sent to the PO following the selection.&lt;/p&gt;
&lt;p&gt;These additional commands are the &amp;ldquo;Select File&amp;rdquo; and &amp;ldquo;Read Records&amp;rdquo; commands; they are included in the selection SeRequest by calls to the &amp;ldquo;prepare&amp;rdquo; commands corresponding to them prior to providing the PoSelectionRequest object to the prepareSelection method of the keyple-core SeSelection class (see Keyple Core API).&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;prepare&amp;rdquo; methods don&amp;rsquo;t return anything. The result of their execution will be reported in the CalypsoPo object when processing the selection SeRequest.&lt;/p&gt;
&lt;h2 id=&#34;matching-se&#34;&gt;Matching SE&lt;/h2&gt;
&lt;p&gt;Another role of PoSelectionRequest is to provide the keyple-core selection mechanism with the means to build a CalypsoPo object. This object is returned by the getMatchingSe method of MatchingSelection (keyple-core).&lt;/p&gt;
&lt;p&gt;For that, PoSelectionRequest implements the protected method &amp;ldquo;parse&amp;rdquo; which allows this specialization in CalypsoPo of the AbstractMatchingSe. The CalypsoPo is created from the parsing of the Select Application response (FCI) when the generic selection is processed.&lt;/p&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Public methods&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;prepareSelectFileCmd(byte[] path, String extraInfo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;prepareSelectFileCmd(SelectFileCmdBuild.SelectControl selectControl, String extraInfo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;prepareReadRecordsCmd(byte sfi, ReadDataStructure readDataStructureEnum, byte firstRecordNumber, int expectedLength, String extraInfo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;prepareReadRecordsCmd(byte sfi, ReadDataStructure readDataStructureEnum, byte firstRecordNumber, String extraInfo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* Constructor */&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoSelectionRequest&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PoSelector&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;poSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prepareSelectFileCmd&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prepareSelectFileCmd&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SelectFileCmdBuild&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;SelectControl&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;selectControl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prepareReadRecordsCmd&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sfi&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ReadDataStructure&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;readDataStructureEnum&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;firstRecordNumber&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;expectedLength&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;prepareReadRecordsCmd&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sfi&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ReadDataStructure&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;readDataStructureEnum&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;firstRecordNumber&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;calypsopo&#34;&gt;CalypsoPo&lt;/h2&gt;
&lt;p&gt;The CalypsoPo object holds all known information about the PO being processed. The object is created at the time the PO is selected and will be progressively updated during the subsequent processing, especially during the operations carried out with PoTransaction.&lt;/p&gt;
&lt;p&gt;This information includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data extracted from the analysis of the selection itself: analysis of the FCI field (or the ATR in the case of Rev 1.0):
&lt;ul&gt;
&lt;li&gt;Invalidation status&lt;/li&gt;
&lt;li&gt;DF Name&lt;/li&gt;
&lt;li&gt;Serial Number&lt;/li&gt;
&lt;li&gt;Revision&lt;/li&gt;
&lt;li&gt;The class byte to be used in APDU commands to this PO&lt;/li&gt;
&lt;li&gt;Application type, subtype&lt;/li&gt;
&lt;li&gt;Software issuer, version, revision&lt;/li&gt;
&lt;li&gt;Availability of optional features: PIN, Stored Value&lt;/li&gt;
&lt;li&gt;Ratification required flag&lt;/li&gt;
&lt;li&gt;Mode 3.2&lt;/li&gt;
&lt;li&gt;Characteristics of the modification buffer: count mode, size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data resulting from the execution of additional commands sent in the selection phase or executed later with PoTransaction:
&lt;ul&gt;
&lt;li&gt;File selection status&lt;/li&gt;
&lt;li&gt;File records and counters values: read and written ?&lt;/li&gt;
&lt;li&gt;PIN presentation status&lt;/li&gt;
&lt;li&gt;Stored Value logs&lt;/li&gt;
&lt;li&gt;Secure session status (written values may depend on the secure session state and therefore do not represent the true status of the PO&amp;rsquo;s memory)&lt;/li&gt;
&lt;li&gt;The status of failed commands, if any&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-api&#34;&gt;Java API&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CalypsoPo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SeResponse&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;selectionResponse&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransmissionMode&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transmissionMode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoRevision&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getRevision&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getDfName&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getApplicationSerialNumber&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getAtr&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;isModificationsCounterInBytes&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getModificationsCounter&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getBufferSizeIndicator&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getBufferSizeValue&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getPlatformByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getApplicationTypeByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;isRev3_2ModeAvailable&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;isRatificationCommandRequired&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hasCalypsoStoredValue&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hasCalypsoPin&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getApplicationSubtypeByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareIssuerByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareVersionByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareRevisionByte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;isDfInvalidated&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PoClass&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getPoClass&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color:#f57900&#34;&gt;missing:&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Further&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;PO&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;identification&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CD&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Light&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GTML&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CD21&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;etc&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;PIN&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;presentation&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;status&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Stored&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;logs&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;Content&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;files&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;counters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-sam-selection-api&#34;&gt;The SAM selection API&lt;/h1&gt;
&lt;h2 id=&#34;samselectionrequest&#34;&gt;SamSelectionRequest&lt;/h2&gt;
&lt;p&gt;The SamSelectionRequest just overrides SeSelectionRequest to provide a way to build a CalypsoSam object during the selection process.&lt;/p&gt;
&lt;h3 id=&#34;java-api-1&#34;&gt;Java API&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SamSelectionRequest&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SamSelector&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;samSelector&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;calypsosam&#34;&gt;CalypsoSam&lt;/h2&gt;
&lt;p&gt;The CalypsoSam object is the result of a selection made with a SamSelectionRequest.&lt;/p&gt;
&lt;p&gt;All information is extracted from the ATR.&lt;/p&gt;
&lt;p&gt;Note: in the case of a HSM, the CalypsoSam is built from an ATR reconstituted from the information available at the HSM level.&lt;/p&gt;
&lt;h3 id=&#34;java-api-2&#34;&gt;Java API&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CalypsoSam&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SeResponse&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;selectionResponse&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TransmissionMode&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;transmissionMode&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;extraInfo&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SamRevision&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSamRevision&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSerialNumber&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getPlatform&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getApplicationType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getApplicationSubType&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareIssuer&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareVersion&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSoftwareRevision&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Keyple ‘Remote SE’ – User guide (high level API)</title>
      <link>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/remotese/keypleremotese_userguide/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://calypsonet.github.io/keyple-doc-yy/docs/public-apis/remotese/keypleremotese_userguide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;why-do-i-need-remote-se&#34;&gt;Why do I need Remote SE&lt;/h2&gt;
&lt;p&gt;It is mostly used to host the Ticketing Logic on a remote server. The end user terminal allows the server to connect to its local &lt;strong&gt;SE Reader&lt;/strong&gt; via the Remote Se API, then the server can communicate with the Reader as if it was a local reader.&lt;/p&gt;
&lt;p&gt;In a Calypso context, it is useful when a SAM reader and a PO reader are not connected to the same terminal. With the Remote Se API, you can open Calypso transaction within a distributed architecture.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;The architecture is based on a Slave-Master principle. The slave hosts a local SE reader that will be accessed remotely by the Master.&lt;/p&gt;
&lt;p&gt;The components of the Remote Se Architecture don’t rely on a given transport layer, either Slave and Master can be a client or a server of any protocol (ie : http, websocket).&lt;/p&gt;
&lt;p&gt;Example of a use case&lt;/p&gt;
&lt;p&gt;A server (let&amp;rsquo;s identify it &lt;strong&gt;server1&lt;/strong&gt;) needs to communicate with other terminals reader (&lt;strong&gt;client2&lt;/strong&gt;). To give access to it&amp;rsquo;s local reader, &lt;strong&gt;client2&lt;/strong&gt; should open a session to &lt;strong&gt;server1&lt;/strong&gt; via the &lt;code&gt;SlaveAPI#connect()&lt;/code&gt; method. Doing this, &lt;strong&gt;server1&lt;/strong&gt; receives the possibility to communicate with the local reader of &lt;strong&gt;client2&lt;/strong&gt;. In this scenario &lt;strong&gt;server1&lt;/strong&gt; is a Master node and &lt;strong&gt;client2&lt;/strong&gt; is a Slave node.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;client2&lt;/strong&gt; opens successfully a session to &lt;strong&gt;server1&lt;/strong&gt;, a &lt;code&gt;VirtualReader&lt;/code&gt; is created on &lt;strong&gt;server1&lt;/strong&gt; side. This &lt;code&gt;VirtualReader&lt;/code&gt; is viewed as a local reader &lt;strong&gt;server1&lt;/strong&gt;, in fact, the &lt;code&gt;VirtualReader&lt;/code&gt;  acts as a proxy to the &lt;code&gt;SeReader&lt;/code&gt; hosted on &lt;strong&gt;client2&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;keypledto&#34;&gt;KeypleDto&lt;/h2&gt;
&lt;p&gt;The Remote Se Architecture is based on a RPC architecture. When a Master node invokes a transmit method on a Virtual Reader, this method is called on the corresponding local Reader on the Slave node.&lt;/p&gt;
&lt;p&gt;The RPC protocol of the Remote Se Architecture is based on Json messages sent back and forth between the Slaves and the Master.&lt;/p&gt;
&lt;p&gt;Those messages share a common structure called &lt;strong&gt;KeypleDto&lt;/strong&gt; whose definition is specified here after.&lt;/p&gt;
&lt;p&gt;The definition of the keypleDto follows the Json-RPC 1.0 specification.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeypleDto definition

/* Metadata */
String requesterNodeId; // Requester Node Id 
String targetNodeId; // Receiver Node Id 
String sessionId; // Master reader session
String nativeReaderName; // Native reader name
String virtualReaderName; // Virtual reader name

/* API call */ 
String id; // Id of the request
String action; // API methods to be called (listed in the object RemoteMethodName)
String body; // Arguments of the API (json-serialized)
Boolean isRequest; // Is a request or a response
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;user-guide&#34;&gt;User guide&lt;/h2&gt;
&lt;p&gt;To establish a connection with the master, the slave device must use the &lt;strong&gt;SlaveAPI&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By passing a local reader to the connectReader, the slave will contact the master resulting in the opening of a virtual session.&lt;/p&gt;
&lt;p&gt;During this session, a Virtual reader is available on the master side. Every apdu command sent to the Virtual Reader will be transferred to the Local reader and the response sent back to the Virtual reader&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VirtualReader&lt;/strong&gt; are created by the &lt;strong&gt;RemoteSePlugin&lt;/strong&gt; on Master node when a local reader initiates a connection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Slave API
 - connectReader(SeReader localReader) : connect a local reader to the master node 
 - disconnectReader(String sessionId, String nativeReaderName) : disconnect a connected reader from the master node

Master API
 - RemoteSePlugin getPlugin() : get the remote se plugin


On Master node the main object is the VirtualReader 
- It can be manipulated as any SeReader
- Every command is transferred to the local reader
- It is accessible from the RemoteSe Plugin
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;To allow the slave and master to exchange KeypleDto, a transport layer should be implemented via simple node-to-node layout. Both SlaveAPI and MasterAPI needs a DtoNode to be functional.&lt;/p&gt;
&lt;p&gt;DtoNode can be implemented in top of websocket protocol or http webservice protocol. As Slave and Master have the initiative to send keypleDto, it is preferred to provide a 2-way communication protocol.&lt;/p&gt;
&lt;p&gt;In case of http webservice, a polling mechanism can be implemented so the server can send messages to the client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleRemoteSe_DtoNode.png&#34; alt=&#34;alt_text&#34; title=&#34;KeypleRemoteSe_DtoNode.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../../img/KeypleRemoteSe_Architecture.png&#34; alt=&#34;alt_text&#34; title=&#34;image_tooltip&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;quickstart-guide&#34;&gt;Quickstart Guide&lt;/h2&gt;
&lt;h3 id=&#34;configure-master-api-with-a-dtonode&#34;&gt;Configure Master API with a DtoNode&lt;/h3&gt;
&lt;p&gt;In this quickstart guide, we will use a pre-built transport layer for the Remote Se Architecture.&lt;/p&gt;
&lt;p&gt;This transport layer is built upon a Webservice protocol with polling. It is available on the remotese example projects under the package ‘transport”.&lt;/p&gt;
&lt;p&gt;The MasterAPI will be instanciated with the ServerNode of the WsPollingRetrofit Transport.&lt;/p&gt;
&lt;p&gt;The ServerNode component of this transport is a self contained web server based on the sun jdk 6.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Configure the server  Dto Node with a unique nodeId */
ServerNode node = new WsPollingRetrofitFactory(&amp;quot;master1&amp;quot;).getServer()
/* Start the server */ 
node.start() 
/* Create a MasterAPI bound to this DtoNode */
MasterAPI masterAPI = new MasterAPI(SeProxyService.getInstance(), node);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configure-slave-api-with-a-dtonode&#34;&gt;Configure Slave API with a DtoNode&lt;/h3&gt;
&lt;p&gt;On the other hand, the slave we will instanciate the SlaveAPI with the clientNode of the transport with the Master node id, it will connect to.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Configure the client Dto Node layer with the master node it will connect to and a unique slave node id*/
ClientNode node = new WsPollingRetrofitFactory(&amp;quot;master1&amp;quot;).getClient(&amp;quot;client1&amp;quot;)
/* Establish connection */
node.connect()
/* Create the SlaveAPI */
SlaveAPI slaveAPI = new SlaveAPI(SeProxyService.getInstance(), node, &amp;quot;master1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;connect-a-local-reader-to-master&#34;&gt;Connect a local Reader to Master&lt;/h3&gt;
&lt;p&gt;The next step is to connect a SeReader from the slave node by calling the SlaveAPI connectReader method.&lt;/p&gt;
&lt;p&gt;In this example we will use a StubReader instanciated from the Stub Plugin.&lt;br&gt;
&lt;br&gt;
Once the local reader is connected, it can be used by the Master as a Virtual Reader.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Slave */
StubPlugin stubPlugin = StubPlugin.getInstance();
stubPlugin.plugStubReader(&amp;quot;stubClientSlave&amp;quot;, true);
/* retrieve SeReader Instance */ 
SeReader localReader = stubPlugin.getReader(&amp;quot;stubClientSlave&amp;quot;);
/* connect local Reader to Master */ 
slaveAPI.connectReader(localReader)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;listen-for-reader-events-on-master-side&#34;&gt;Listen for Reader Events on Master side&lt;/h3&gt;
&lt;p&gt;To get notified of a SeReader connection, you can observe the Remote Se Plugin, &lt;RsePlugin&gt; for events such as : &lt;strong&gt;&lt;em&gt;READER_CONNECTED, READER_DISCONNECTED&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To get notified of a Se inserted into a remote Se Reader, you can observe the corresponding Virtual Reader for events such as : &lt;strong&gt;&lt;em&gt;SE_MATCHED, SE_INSERTED, SE_REMOVED&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Master */

RsePlugin rsePlugin = masterAPI.getPlugin();

rsePlugin.addObserver(this);

public void update(final Object o) {
    // Receive a PluginEvent
    if (o instanceof PluginEvent) {
        switch (o.getEventType()) {
            case READER_CONNECTED: break;
            case READER_DISCONNECTED:break;}
    }
    // ReaderEvent
    else if (o instanceof ReaderEvent) {
        switch (o.getEventType()) {
            case SE_MATCHED:break;
            case SE_INSERTED:break;
            case SE_REMOVED:break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;developer-guide&#34;&gt;Developer Guide&lt;/h2&gt;
&lt;h3 id=&#34;keypledto-type&#34;&gt;KeypleDto type&lt;/h3&gt;
&lt;p&gt;KeypleDto are RPC messages sent back and forth between Slave nodes and the Master node. They transport a piece of information that can be a Request, a Response, an Error or a Notification. A fifth type is used internally : NoResponse.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; : it transports the remote procedure invocation. It can be a ProxyReader method such as a transmit() or a remoteSe specific method like connectReader. The name of the method is in the “action” field, the “body” wraps the parameters of the method. Each Request is assigned a unique “id” to be easily retrieved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response&lt;/strong&gt; : it transports the remote procedure response, if it is not an error. It matches a Request and will be sent to the node that originated the Request. The “body” field contains the response object(s).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt; (Exception) : Same as Response but it transports an error resulting from the Request. The “body” field contains a Java Exception&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notification&lt;/strong&gt; : it transports a notification such as a ReaderEvent. No response is expected from a notification. The ‘id’ field is empty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoResponse&lt;/strong&gt; : it should not be sent. This keypleDto is a stop semaphore to notify DtoNode that the received keypleDto do not expect a response back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-reader-events-are-processed-in-remote-se-architecture&#34;&gt;How Reader Events are processed in Remote Se Architecture&lt;/h3&gt;
&lt;p&gt;When a Reader Event (SE_INSERTED) is thrown by a local reader, if this local reader is connected to a Master, the event is then propagated to the virtual reader on the Master node.&lt;/p&gt;
&lt;p&gt;When received by the virtual reader, the event is transformed to be seen by the Master Application as an event thrown by the virtual reader. The fields reader name and plugin name are converted to match the Virtual Reader name and the Remote SE Plugin name.&lt;/p&gt;
&lt;h3 id=&#34;transport-implementation&#34;&gt;Transport implementation&lt;/h3&gt;
&lt;h4 id=&#34;transportdto-vs-keypledto&#34;&gt;TransportDto vs KeypleDto&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;KeypleDto&lt;/code&gt; is the object that contains the information about the remote invocation, they are built and processed by the plugin, there is no need to modify them.&lt;/p&gt;
&lt;p&gt;Users needs to implement (and personalize if needed) &lt;code&gt;TransportDto&lt;/code&gt; which is an envelop for a KeypleDto. It allows to enrich a KeypleDto with information on the transport implementation to allow back and forth communication. (for instance a callback url)&lt;/p&gt;
&lt;h4 id=&#34;dtonode&#34;&gt;DtoNode&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DtoNode&lt;/code&gt; is a convenient interface, it links a &lt;code&gt;DtoSender&lt;/code&gt; with a &lt;code&gt;DtoHandler&lt;/code&gt; to create a unique point of contact.&lt;/p&gt;
&lt;h4 id=&#34;dtosender&#34;&gt;DtoSender&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DtoSender&lt;/code&gt; is the component responsible for sending the TransportDto to the other terminal.&lt;/p&gt;
&lt;h4 id=&#34;dtohandler&#34;&gt;DtoHandler&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DtoHandler&lt;/code&gt; interface is implemented by both &lt;code&gt;SlaveAPI&lt;/code&gt; (Slave side) and &lt;code&gt;MasterAPI&lt;/code&gt; (Master side). Both services waits for a KeypleDto, process it, and will return a KeypleDto as a response (if any). You should link a &lt;code&gt;DtoNode&lt;/code&gt; to both &lt;code&gt;SlaveAPI&lt;/code&gt; and &lt;code&gt;MasterAPI&lt;/code&gt; to make them communicate.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
